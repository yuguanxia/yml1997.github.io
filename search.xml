<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode 566. 重塑矩阵</title>
      <link href="2021/02/17/Leetcode-566-%E9%87%8D%E5%A1%91%E7%9F%A9%E9%98%B5/"/>
      <url>2021/02/17/Leetcode-566-%E9%87%8D%E5%A1%91%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<p>在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。</p><p>给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。</p><p>重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。</p><p>如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p><p><a href="https://leetcode-cn.com/problems/reshape-the-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reshape-the-matrix</a></p><a id="more"></a><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><p>输入:<br>nums =<br>[[1,2],<br> [3,4]]<br>r = 1, c = 4<br>输出:<br>[[1,2,3,4]]<br>解释:<br>行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h4><p>输入:<br>nums =<br>[[1,2],<br> [3,4]]</p><p>r = 2, c = 4    </p><p>输出:<br>[[1,2],<br> [3,4]]    </p><p>解释:<br>没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。<br>注意：    </p><p>给定矩阵的宽和高范围在 [1, 100]。<br>给定的 r 和 c 都是正数。</p><h4 id="Python解"><a href="#Python解" class="headerlink" title="Python解"></a>Python解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matrixReshape</span><span class="params">(self, nums: List[List[int]], r: int, c: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        X = len(nums)</span><br><span class="line">        Y = len(nums[<span class="number">0</span>])        </span><br><span class="line">        N = X * Y</span><br><span class="line">        row,  col = <span class="number">0</span> , <span class="number">0</span></span><br><span class="line">        res = [[<span class="number">0</span>] * c <span class="keyword">for</span> _ <span class="keyword">in</span> range(r)]        </span><br><span class="line">        <span class="keyword">if</span> r * c != N :</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,X):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,Y):</span><br><span class="line">                    res[row][col] = nums[i][j]</span><br><span class="line">                    col += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> col == c:</span><br><span class="line">                        row +=<span class="number">1</span></span><br><span class="line">                        col = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>遍历</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 561. 数组拆分 I </title>
      <link href="2021/02/16/Leetcode-561-%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86-I/"/>
      <url>2021/02/16/Leetcode-561-%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86-I/</url>
      
        <content type="html"><![CDATA[<p>给定长度为 2n 的整数数组 nums ，你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从 1 到 n 的 min(ai, bi) 总和最大。<br>返回该 最大总和 。（简单）</p><h5 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h5><p>输入：nums = [1,4,3,2]</p><p>输出：4</p><p>解释：所有可能的分法（忽略元素顺序）为：</p><ol><li>(1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3</li><li>(1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3</li><li>(1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4</li></ol><p>所以最大总和为 4</p><h5 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h5><p>输入：nums = [6,2,6,5,1,2]</p><p>输出：9</p><p>解释：最优的分法为 (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9</p><h5 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h5><p>1 &lt;= n &lt;= 104</p><p>nums.length == 2 * n</p><p>-104 &lt;= nums[i] &lt;= 104</p><p>链接：<a href="https://leetcode-cn.com/problems/array-partition-i" target="_blank" rel="noopener">https://leetcode-cn.com/problems/array-partition-i</a></p><h4 id="Python-解"><a href="#Python-解" class="headerlink" title="Python 解"></a>Python 解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrayPairSum</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        N = len(nums)</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,N<span class="number">-1</span>,<span class="number">2</span>):</span><br><span class="line">            sum += nums[i]</span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>时间复杂度Nlog(N)（算上排序的时间）<br>大的和大的一组，小的和小的一组就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrayPairSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> sum(nums[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>Python双冒号切片意思是每隔2个选一个的意思，精简，Python之美~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 485. 最大连续1的个数</title>
      <link href="2021/02/15/Leetcode-485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>2021/02/15/Leetcode-485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>给定一个二进制数组， 计算其中最大连续1的个数。（简单）</p><a id="more"></a><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><p>输入: [1,1,0,1,1,1]<br>输出: 3<br>解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.<br>注意：</p><p>输入的数组只包含 0 和1。<br>输入数组的长度是正整数，且不超过 10,000。</p><p>链接：<a href="https://leetcode-cn.com/problems/max-consecutive-ones" target="_blank" rel="noopener">https://leetcode-cn.com/problems/max-consecutive-ones</a></p><h4 id="Python-解"><a href="#Python-解" class="headerlink" title="Python 解"></a>Python 解</h4><p><strong>思路</strong><br>今天的题目比较简单，一遍for循环就好。我们在遍历的过程中记录连续1的个数，遇到0就把计数count清零。因为题目只要求最大值，所以我们保留住最大值就好，要用max函数。</p><p><strong>容易错的点</strong>是最后一位的处理。一般的想法是遇到0，就把计数器count处理一下。但如果最后一位是1，最后一个计数器count的数值就没被处理。为了避免这种情况，我们在写判断条件的时候要判断是不是到了最后一位。</p><p>（我自己的写法就是没考虑到这个最后一位的点如何处理）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        N = len(nums)</span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        max = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,N):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">1</span>:</span><br><span class="line">                counter += <span class="number">1</span>    </span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span> <span class="keyword">or</span> i == N<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> counter &gt; max:</span><br><span class="line">                    max = counter</span><br><span class="line">                counter = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">return</span> max</span><br></pre></td></tr></table></figure><p>滑动窗口法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        N = len(nums)</span><br><span class="line">        index = <span class="number">-1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,N):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                index = i    </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = max(res,i-index)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>解题思路</p><p>1.可以对数组遍历一次，遍历时需要保存遇到的最后一个 0 的位置 index；<br>2.如果遍历到 i 位置的数字是 0，那么更新 index 为当前位置 i；<br>3.如果遍历到 i 位置的数字是 1，那么当前区间内共有 i - index 个连续的 1；<br>记录遍历过程中所有连续的 1 的长度的最大值</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 1.两数之和</title>
      <link href="2021/02/14/Leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>2021/02/14/Leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>你可以按任意顺序返回答案。</p><a id="more"></a> <h5 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h5><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。    </p><p>示例 2：<br>输入：nums = [3,2,4], target = 6<br>输出：[1,2]    </p><p>示例 3：<br>输入：nums = [3,3], target = 6<br>输出：[0,1]</p><h5 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h5><p>2 &lt;= nums.length &lt;= 103<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>只会存在一个有效答案</p><p><a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p><h4 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h4><p>两个循环</p><h4 id="字典法"><a href="#字典法" class="headerlink" title="字典法"></a>字典法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        d = dict()</span><br><span class="line">        N = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i  <span class="keyword">in</span> range (<span class="number">0</span>,N):</span><br><span class="line">            <span class="keyword">if</span> target-nums[i] <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">return</span> [d[target-nums[i]],i]</span><br><span class="line">            d[nums[i]] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><p>用一个字典对应数值和序号，来找对应即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 765. 情侣牵手</title>
      <link href="2021/02/14/Leetcode-765-%E6%83%85%E4%BE%A3%E7%89%B5%E6%89%8B/"/>
      <url>2021/02/14/Leetcode-765-%E6%83%85%E4%BE%A3%E7%89%B5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>N 对情侣坐在连续排列的 2N 个座位上，想要牵到对方的手。 计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。 一次交换可选择任意两人，让他们站起来交换座位。</p><p>人和座位用 0 到 2N-1 的整数表示，情侣们按顺序编号，第一对是 (0, 1)，第二对是 (2, 3)，以此类推，最后一对是 (2N-2, 2N-1)。</p><p>这些情侣的初始座位  row[i] 是由最初始坐在第 i 个座位上的人决定的。</p><a id="more"></a><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><p>输入: row = [0, 2, 1, 3]<br>输出: 1<br>解释: 我们只需要交换 row[1] 和 row[2] 的位置即可。</p><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><p>输入: row = [3, 2, 0, 1]<br>输出: 0<br>解释: 无需交换座位，所有的情侣都已经可以手牵手了。    </p><h5 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h5><p>len(row) 是偶数且数值在 [4, 60]范围内。<br>可以保证row 是序列 0…len(row)-1 的一个全排列。</p><p><a href="https://leetcode-cn.com/problems/couples-holding-hands" target="_blank" rel="noopener">https://leetcode-cn.com/problems/couples-holding-hands</a></p><h2 id="Python-解"><a href="#Python-解" class="headerlink" title="Python 解"></a>Python 解</h2><h4 id="暴力法（贪心算法）"><a href="#暴力法（贪心算法）" class="headerlink" title="暴力法（贪心算法）"></a>暴力法（贪心算法）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSwapsCouples</span><span class="params">(self, row: List[int])</span> -&gt; int:</span></span><br><span class="line">        N = len(row)</span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,N<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> row[i] % <span class="number">2</span> ==<span class="number">0</span> <span class="keyword">and</span> row[i+<span class="number">1</span>]-row[i] != <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, N):</span><br><span class="line">                    <span class="keyword">if</span>  row[j]-row[i] == <span class="number">1</span>:</span><br><span class="line">                        row[i + <span class="number">1</span>], row[j] = row[j], row[i + <span class="number">1</span>]</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> row[i] % <span class="number">2</span> !=<span class="number">0</span> <span class="keyword">and</span> row[i]-row[i+<span class="number">1</span>] != <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, N):</span><br><span class="line">                    <span class="keyword">if</span>  row[i]-row[j] == <span class="number">1</span>:</span><br><span class="line">                        row[i + <span class="number">1</span>], row[j] = row[j], row[i + <span class="number">1</span>]</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><p>list偶数位置的部分和奇数位置的部分作比较（从row[0]开始），list的值如果是偶数，则下一个数字一定要比他大1，奇数则小1.然后再遍历之后的位置进行更换即可。</p><p>时间复杂度：O(N ^ 2)，题目给出的 len(row) 在 60 以内，耗时 36 ms。<br>空间复杂度：O(1)，内存消耗 14.9 MB。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSwapsCouples</span><span class="params">(self, row)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type row: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        N = len(row)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, N - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> row[i] == row[i + <span class="number">1</span>] ^ <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, N):</span><br><span class="line">                <span class="keyword">if</span> row[i] == row[j] ^ <span class="number">1</span>:</span><br><span class="line">                    row[i + <span class="number">1</span>], row[j] = row[j], row[i + <span class="number">1</span>]</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>大佬的解法，内在逻辑是一样的</p><p>i的range按照每2个起跳就好</p><p><strong>位运算</strong></p><p>在求数字 x 的对象时用到了一个技巧，x 的对象是x ^ 1。解释如下：</p><p>当 x 是偶数，则其二进制的末尾是 0，所以 x ^ 1 将其二进制的末尾改成 1，于是得到了x的对象 x+1。</p><p>当 x 是奇数，则其二进制的末尾是 1，所以 x ^ 1 将其二进制的末尾改成 0，于是得到了x的对象x−1。</p><h4 id="降低时间复杂度到O-N-（贪心算法优化）"><a href="#降低时间复杂度到O-N-（贪心算法优化）" class="headerlink" title="降低时间复杂度到O(N)（贪心算法优化）"></a>降低时间复杂度到O(N)（贪心算法优化）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSwapsCouples</span><span class="params">(self, row: List[int])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        seatmap= [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(row))]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(row)):</span><br><span class="line">            seatmap[row[j]] = j<span class="comment">#序号为row[j]的人的座位号为j</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(row),<span class="number">2</span>):</span><br><span class="line">            x = row[i]^<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x == row[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = seatmap[x]<span class="comment">#找到序号为x的人对应的座位号</span></span><br><span class="line">                row[i+<span class="number">1</span>],row[index] = row[index],row[i+<span class="number">1</span>]<span class="comment">#交换座位使情侣坐一起</span></span><br><span class="line">                <span class="comment">#此时需要更新seatmap的信息</span></span><br><span class="line">                seatmap[x] = i+<span class="number">1</span><span class="comment">#序号为x的人现在在座位i+1上</span></span><br><span class="line">                seatmap[row[index]] = index<span class="comment">#序号为row[index]的人现在在做为index上</span></span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>可以利用一个列表来保存座位信息，即序号为seatmap[row[i]] = i代表序号为row[i]的人座位号是i，这样在找情侣的时候可以直接在seatmap中进行索引，注意交换位置后需要对seatmap进行相应的更新</p><p>时间复杂度O(n)，空间复杂度O(n)</p><h4 id="降低时间复杂度到O-N-（并查集）"><a href="#降低时间复杂度到O-N-（并查集）" class="headerlink" title="降低时间复杂度到O(N)（并查集）"></a>降低时间复杂度到O(N)（并查集）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisjointSetUnion</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.parent = list(range(n))</span><br><span class="line">        self.rank = [<span class="number">1</span>] * n</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, idx)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.parent[idx] != idx:</span><br><span class="line">            self.parent[idx] = self.find(self.parent[idx])</span><br><span class="line">        <span class="keyword">return</span> self.parent[idx]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, idx1, idx2)</span>:</span></span><br><span class="line">        root1, root2 = self.find(idx1), self.find(idx2)</span><br><span class="line">        <span class="keyword">if</span> root1 == root2: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.rank[root1] &lt; self.rank[root2]:</span><br><span class="line">            self.parent[root1] = root2</span><br><span class="line">            self.rank[root2] += self.rank[root1]</span><br><span class="line">        <span class="keyword">elif</span> self.rank[root1] &gt; self.rank[root2]:</span><br><span class="line">            self.parent[root2] = root1</span><br><span class="line">            self.rank[root1] += self.rank[root2]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.parent[root1] = root2</span><br><span class="line">            self.rank[root2] += self.rank[root1]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSwapsCouples</span><span class="params">(self, row: List[int])</span> -&gt; int:</span></span><br><span class="line">        l = len(row)</span><br><span class="line">        n = l // <span class="number">2</span></span><br><span class="line">        uf = DisjointSetUnion(n)</span><br><span class="line">        <span class="comment"># 合并有关系的节点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, l, <span class="number">2</span>):</span><br><span class="line">            uf.union(row[i] // <span class="number">2</span>, row[i + <span class="number">1</span>] // <span class="number">2</span>)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 叠加每个联通分量</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="comment"># 用根节点的rank</span></span><br><span class="line">            <span class="keyword">if</span> uf.parent[i] == i:</span><br><span class="line">                res += uf.rank[i] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>如果有三对情侣已经坐好，就有三个连通分量，三个情侣都没坐好，就是只有一个连通分量，则最少交换次数为两次，即为3-1.可以使用<strong>并查集</strong>查看交换的次数</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 448. 找到所有数组中消失的数字</title>
      <link href="2021/02/13/Leetcode448-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>2021/02/13/Leetcode448-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p><p>找到所有在 [1, n] 范围之间没有出现在数组中的数字。</p><p>您能在不使用额外空间且时间复杂度为<strong>O(n)</strong>的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><p>输入:<br>[4,3,2,7,8,2,3,1]</p><p>输出:<br>[5,6]</p><p><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/</a></p><h4 id="Python-解"><a href="#Python-解" class="headerlink" title="Python 解"></a>Python 解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDisappearedNumbers</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        counter = set(nums)</span><br><span class="line">        N = len(nums)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> counter:</span><br><span class="line">                res.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>集合(set)</strong>的查找时间复杂度可以降低到 O(1)，符合题意, 直接用list遍历会超标</p><p><br><br><br></p><h4 id="索引标记法（无额外空间开销）"><a href="#索引标记法（无额外空间开销）" class="headerlink" title="索引标记法（无额外空间开销）"></a>索引标记法（无额外空间开销）</h4><p>观察nums列表，其元素值均在1 ~ n 范围内，当且仅当不缺少数字时，nums拥有1 ~ n 的所有整数且不重复。</p><p>所以，我们可以将遍历nums，将每个元素的绝对值-1 作为索引，将索引对应的元素变为其原本绝对值的负数，即利用负号标记该索引位置，此时未被标记的位置，其索引+1即为缺失数字。</p><p>例如：nums=[4,3,2,7,8,2,3,1]，要标记 nums[4] 对应的 8 时，根据 nums[abs(num) - 1] = -abs(nums[abs(num) - 1]) 公式，则必须先满足 abs(num)-1==4，而nums中并不存在绝对值为 5 的元素，即 8 未标记时说明缺失数字 5。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDisappearedNumbers</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[abs(num) - <span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                nums[abs(num) - <span class="number">1</span>] *= <span class="number">-1</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                res.append(i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 992. K 个不同整数的子数组（滑动窗口）</title>
      <link href="2021/02/09/Leetcode-992-K-%E4%B8%AA%E4%B8%8D%E5%90%8C%E6%95%B4%E6%95%B0%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>2021/02/09/Leetcode-992-K-%E4%B8%AA%E4%B8%8D%E5%90%8C%E6%95%B4%E6%95%B0%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个<strong>正整数数组 A</strong>，如果 A 的某个子数组中不同整数的个数恰好为 K，则称 A 的这个连续、不一定独立的子数组为<strong>好子数组</strong>。</p><p>（例如，[1,2,3,1,2] 中有 3 个不同的整数：1，2，以及 3。）</p><p>返回 A 中<strong>好子数组</strong>的数目。</p><a id="more"></a><p>示例 1：</p><p>输入：A = [1,2,1,2,3], K = 2<br>输出：7<br>解释：恰好由 2 个不同整数组成的子数组：[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].<br>示例 2：</p><p>输入：A = [1,2,1,3,4], K = 3<br>输出：3<br>解释：恰好由 3 个不同整数组成的子数组：[1,2,1,3], [2,1,3], [1,3,4].<br><br><br><br><br><br></p><h3 id="Python解"><a href="#Python解" class="headerlink" title="Python解"></a>Python解</h3><p>这是滑动窗口的不错的问题</p><p>我们先来看<strong>滑动窗口</strong>模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSubstring</span><span class="params">(s)</span>:</span></span><br><span class="line">    N = len(s) <span class="comment"># 数组/字符串长度</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="number">0</span> <span class="comment"># 双指针，表示当前遍历的区间[left, right]，闭区间</span></span><br><span class="line">    counter = collections.Counter() <span class="comment"># 用于统计 子数组/子区间 是否有效</span></span><br><span class="line">    res = <span class="number">0</span> <span class="comment"># 保存最大的满足题目要求的 子数组/子串 长度</span></span><br><span class="line">    <span class="keyword">while</span> right &lt; N: <span class="comment"># 当右边的指针没有搜索到 数组/字符串 的结尾</span></span><br><span class="line">        counter[s[right]] += <span class="number">1</span> <span class="comment"># 增加当前右边指针的数字/字符的计数</span></span><br><span class="line">        <span class="keyword">while</span> 区间[left, right]不符合题意：<span class="comment"># 此时需要一直移动左指针，直至找到一个符合题意的区间</span></span><br><span class="line">            counter[s[left]] -= <span class="number">1</span> <span class="comment"># 移动左指针前需要从counter中减少left位置字符的计数</span></span><br><span class="line">            left += <span class="number">1</span> <span class="comment"># 真正的移动左指针，注意不能跟上面一行代码写反</span></span><br><span class="line">        <span class="comment"># 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串</span></span><br><span class="line">        res = max(res, right - left + <span class="number">1</span>) <span class="comment"># 需要更新结果</span></span><br><span class="line">        right += <span class="number">1</span> <span class="comment"># 移动右指针，去探索新的区间</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>滑动窗口中用到了左右两个指针，它们移动的思路是：<strong>以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。</strong></p><p>这个模板很有用 滑动窗口思想可以用来解<strong>子序列长度、数量</strong>等问题</p><p><br><br><br></p><h3 id="模板的整体思想是："><a href="#模板的整体思想是：" class="headerlink" title="模板的整体思想是："></a>模板的整体思想是：</h3><p>定义<strong>两个指针</strong> left 和 right 分别指向区间的开头和结尾，注意是闭区间；定义 counter 用来统计该区间内的各个字符出现次数；<br><br><strong>1.第一重 while 循环</strong>是为了判断 right 指针的位置是否超出了数组边界；当 right 每次到了新位置，需要增加 right 指针的计数；<br><br><strong>2.第二重 while 循环</strong>是让 left 指针向右移动到 [left, right] 区间符合题意的位置；当 left 每次移动前，需要减少 left 指针的计数；<br><br><strong>3.在第二重 while 循环之后</strong>，成功找到了一个符合题意的 [left, right] 区间，题目要求最大的区间长度，因此更新 res 为 max(res, 当前区间的长度) 。<br>right 指针每次向右移动一步，开始探索新的区间。</p><p><a href="https://leetcode-cn.com/problems/subarrays-with-k-different-integers/solution/cong-zui-jian-dan-de-wen-ti-yi-bu-bu-tuo-7f4v/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subarrays-with-k-different-integers/solution/cong-zui-jian-dan-de-wen-ti-yi-bu-bu-tuo-7f4v/</a></p><p><br><br><br><br><br>利用<strong>滑动窗口</strong>的思想，先求出 <strong>最多 K 个不同整数组成的子数组的个数</strong>，而</p><p><strong>恰好由 K 个不同整数的子数组的个数 = 最多由 K 个不同整数的子数组的个数 - 最多由 K - 1 个不同整数的子数组的个数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subarraysWithKDistinct</span><span class="params">(self, a: List[int], K: int)</span> -&gt; int:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.atMostK(a, K) - self.atMostK(a, K - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">atMostK</span><span class="params">(self, a: List[int], K: int)</span> -&gt; int:</span>    </span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        dis = <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        map = collections.Counter()</span><br><span class="line">        <span class="keyword">while</span> right &lt; len(a):</span><br><span class="line">            <span class="keyword">if</span> map[a[right]] == <span class="number">0</span>:</span><br><span class="line">                dis += <span class="number">1</span></span><br><span class="line">            map[a[right]] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> dis &gt; K :</span><br><span class="line">                map[a[left]] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> map[a[left]] == <span class="number">0</span>:</span><br><span class="line">                    dis -= <span class="number">1</span></span><br><span class="line">                left +=<span class="number">1</span></span><br><span class="line">            count += right - left +<span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p> 利用一个counter当每一个数字的计数器，distinct变量对应不同的数字的数量。通过向内压缩左指针和右指针来求得最终的数值</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/08/hello-world/"/>
      <url>2021/02/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 978. 最长湍流子数组</title>
      <link href="2021/02/08/Leetcode-978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84-1/"/>
      <url>2021/02/08/Leetcode-978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84-1/</url>
      
        <content type="html"><![CDATA[<p>当 A 的子数组 A[i], A[i+1], …, A[j] 满足下列条件时，我们称其为湍流子数组：</p><p>若 i &lt;= k &lt; j，当 k 为奇数时， A[k] &gt; A[k+1]，且当 k 为偶数时，A[k] &lt; A[k+1]；<br>或 若 i &lt;= k &lt; j，当 k 为偶数时，A[k] &gt; A[k+1] ，且当 k 为奇数时， A[k] &lt; A[k+1]。<br>也就是说，如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是湍流子数组。</p><p>返回 A 的最大湍流子数组的长度。</p><p><a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-turbulent-subarray/</a></p><a id="more"></a><p>Python解</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxTurbulenceSize</span><span class="params">(self, a: List[int])</span> -&gt; int:</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range (<span class="number">1</span>,len(a)):</span><br><span class="line">            <span class="keyword">if</span> a[j] == a[j<span class="number">-1</span>]:</span><br><span class="line">                i = j</span><br><span class="line">            <span class="keyword">elif</span> j !=<span class="number">1</span> <span class="keyword">and</span> (a[j]-a[j<span class="number">-1</span>])^(a[j<span class="number">-1</span>]-a[j<span class="number">-2</span>])&gt;=<span class="number">0</span>:</span><br><span class="line">                i = j<span class="number">-1</span></span><br><span class="line">            count = max(count, j-i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p> 此法利用了^，如果两边同号，则大于0。来推算该数组的子序列</p><p>python解2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxTurbulenceSize</span><span class="params">(self, arr)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type arr: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        N = len(arr)</span><br><span class="line">        up = [<span class="number">1</span>] * N</span><br><span class="line">        down = [<span class="number">1</span>] * N</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N):</span><br><span class="line">            <span class="keyword">if</span> arr[i - <span class="number">1</span>] &lt; arr[i]:</span><br><span class="line">                up[i] = down[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                down[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> arr[i - <span class="number">1</span>] &gt; arr[i]:</span><br><span class="line">                up[i] = <span class="number">1</span></span><br><span class="line">                down[i] = up[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                up[i] = <span class="number">1</span></span><br><span class="line">                down[i] = <span class="number">1</span></span><br><span class="line">            res = max(res, max(up[i], down[i]))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p> 此法利用了动态规划的思想，用两个数组（up、down）来记录状态的变化，从而得到折线的子序列。</p><p> <img src="pic.leetcode-cn.com/1612746849-AHrNUH-978.gif" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 567. 字符串的排列（滑动窗口）</title>
      <link href="2021/02/08/Leetcode-978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>2021/02/08/Leetcode-978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>给定两个字符串 <strong>s1</strong> 和 <strong>s2</strong>，写一个函数来判断 <strong>s2</strong> 是否包含 <strong>s1</strong> 的排列。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p><a id="more"></a><p><strong>示例1:</strong></p><p><strong>输入:</strong> s1 = “ab” s2 = “eidbaooo”<br><br><strong>输出:</strong> True<br><br><strong>解释:</strong> s2 包含 s1 的排列之一 (“ba”).</p><p><strong>示例2:</strong></p><p><strong>输入:</strong> s1= “ab” s2 = “eidboaoo”<br><br><strong>输出:</strong> False</p><p><strong>注意：</strong></p><p>输入的字符串只包含小写字母<br>两个字符串的长度都在 [1, 10,000] 之间</p><p><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutation-in-string/</a></p><p><br><br><br><br></p><h2 id="Python-解"><a href="#Python-解" class="headerlink" title="*Python 解 *"></a>*<em>Python 解 *</em></h2><p><br><br><br><strong>1、暴力法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkInclusion</span><span class="params">(self, s1: str, s2: str)</span> -&gt; bool:</span></span><br><span class="line">        n1, n2, s1, start, end = len(s1), len(s2), sorted(s1), <span class="number">0</span>, len(s1)</span><br><span class="line">        <span class="keyword">for</span> end <span class="keyword">in</span> range (n1,n2+<span class="number">1</span>):</span><br><span class="line">            tmp=s2[start:end]</span><br><span class="line">            <span class="keyword">if</span> sorted(tmp) == s1: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            start +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>利用 sort 函数 ，可以将一个字串进行排序，求得两个排序相同，则为True</p><p><br><br><strong>2、滑动窗口法</strong><br><br><strong>滑动窗口 + 字典</strong><br></p><p><strong>分析一</strong>： 题目要求 s1 的排列之一是 s2 的一个<strong>子串</strong>。而子串必须是连续的，所以要求的 s2 子串的长度跟 s1 长度必须相等。</p><p><strong>分析二</strong>： 那么我们有必要把 s1 的每个排列都求出来吗？当然不用。如果字符串 a 是 b 的一个排列，那么当且仅当它们两者中的<strong>每个字符的个数</strong>都必须完全相等。</p><p>所以，根据上面两点分析，我们已经能确定这个题目可以使用 <strong>滑动窗口 + 字典</strong> 来解决。</p><p>我们使用一个长度和 s1 长度相等的<strong>固定窗口大小的滑动窗口</strong>，在 s2 上面从左向右滑动，判断 s2 在滑动窗口内的每个字符出现的个数是否跟 s1 每个字符出现次数完全相等。</p><p>我们定义 counter1 是对 s1 内字符出现的个数的统计，定义 counter2 是对 s2 内字符出现的个数的统计。在窗口每次右移的时候，需要把右边新加入窗口的字符个数在 counter2 中加 1，把左边移出窗口的字符的个数减 1。如果 counter1 == counter2 ，那么说明窗口内的子串是 s1  的一个排列，返回 True；如果窗口已经把 s2 遍历完了仍然没有找到满足条件的排列，返回 False。</p><p><br><br></p><h3 id="躲坑指南："><a href="#躲坑指南：" class="headerlink" title="躲坑指南："></a>躲坑指南：</h3><p>本题中的 counter 可以用字典，也可以用数组来实现。用字典的时候，需要注意：如果移除 left 元素后，若 counter2[s2[left]] == 0 那么需要从字典中删除 left 这个key。因为 {“a”:0, “b”:1} 和 {“b”:1} 是不等的。<br>窗口的定义一定要搞清楚是否包含两边的端点，比如我定义的窗口是 [left, right] 两个端点都包含，那么就需要把两个端点的元素也放入 counter2 中。<br>counter2 初始化的时候只放了 [0, right - 1] 个元素，因为在 while 循环中的第一行就是把 right 元素放到 counter2 中</p><p>作者：fuxuemingzhu<br>链接：<a href="https://leetcode-cn.com/problems/permutation-in-string/solution/zhu-shi-chao-xiang-xi-de-hua-dong-chuang-rc7d/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutation-in-string/solution/zhu-shi-chao-xiang-xi-de-hua-dong-chuang-rc7d/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkInclusion</span><span class="params">(self, s1, s2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s1: str</span></span><br><span class="line"><span class="string">        :type s2: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 统计 s1 中每个字符出现的次数</span></span><br><span class="line">        counter1 = collections.Counter(s1)</span><br><span class="line">        N = len(s2)</span><br><span class="line">        <span class="comment"># 定义滑动窗口的范围是 [left, right]，闭区间，长度与s1相等</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(s1) - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 统计窗口s2[left, right - 1]内的元素出现的次数</span></span><br><span class="line">        counter2 = collections.Counter(s2[<span class="number">0</span>:right])</span><br><span class="line">        <span class="keyword">while</span> right &lt; N:</span><br><span class="line">            <span class="comment"># 把 right 位置的元素放到 counter2 中</span></span><br><span class="line">            counter2[s2[right]] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果滑动窗口内各个元素出现的次数跟 s1 的元素出现次数完全一致，返回 True</span></span><br><span class="line">            <span class="keyword">if</span> counter1 == counter2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 窗口向右移动前，把当前 left 位置的元素出现次数 - 1</span></span><br><span class="line">            counter2[s2[left]] -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果当前 left 位置的元素出现次数为 0， 需要从字典中删除，否则这个出现次数为 0 的元素会影响两 counter 之间的比较</span></span><br><span class="line">            <span class="keyword">if</span> counter2[s2[left]] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">del</span> counter2[s2[left]]</span><br><span class="line">            <span class="comment"># 窗口向右移动</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>设定一个长度等于s1的滑动窗口，在s2上滑动。 用dict或者数组来记录每个元素出现的个数，如果s1的dict和 s2上滑动的窗口的dict值一样，既为s2内含有s1这个排列</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Post</title>
      <link href="2019/12/22/My-First-Post/"/>
      <url>2019/12/22/My-First-Post/</url>
      
        <content type="html"><![CDATA[<p>测试文。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
